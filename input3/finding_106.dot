// Finding: 0488411f-a75e-441b-a7f0-fd97e7600d6d
// Finding.url: https://www.example109.com/community/discussion-forum##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('e301b1ea14b74e38a5a413c8758943cf')><!--/*
// Finding.parentloc: https://www.example109.com/community/discussion-forum##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('e301b1ea14b74e38a5a413c8758943cf')><!--/*
// Finding.domain: www.example109.com
// Finding.base_domain: example109.com
// Finding.source: location.href
// Finding.sink: innerHTML
// Sanitizer.score: 7
// Sanitizer.name: trim
// Sanitizer.location: https://www.example109.com/Community/utility/jquery/jquery.min.js?_=636760735080000000 - trim:2:2991
// Finding.begin: 2010
// Finding.end: 2059
// Finding.original_uuid: fd8d8926-9f9e-45f7-ab0a-b0b41ef159a6
// Finding.TwentyFiveMillionFlowsId: -1314551803
// Finding.script: https://www.example109.com/Community/utility/jquery/jquery.min.js?_=636760735080000000
// Finding.line: 3
// Exploit.uuid: e301b1ea-14b7-4e38-a5a4-13c8758943cf
// Exploit.success: false
// Exploit.status: validated
// Exploit.method: C
// Exploit.type: html
// Exploit.token: attribute
// Exploit.content: href
// Exploit.quote_type: "
// Exploit.tag: a
// Exploit.break_out: #"></iframe></style></script></object></embed></textarea><img src=x onerror=
// Exploit.break_in: ><!--/*
// Exploit.payload: #"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog(1)><!--/*
// Exploit.begin_taint_url: 0
// Exploit.end_taint_url: 49
// Exploit.replace_begin_url: 49
// Exploit.replace_end_url: 49
// Exploit.replace_begin_param: 158
// Exploit.replace_end_param: 158
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: true
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: true
// Issues.MergedSplitAndJoins: true
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: true
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: -1272965573
// DepGraph.sanitizer_hash: 1901461806
// Merged split and join statements 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Non Finite Regex with function on rhs:  replace((&|<|>|"|'|`)/g: 1, s: 0, u: 0, m: 0, i: 0 [escapes(<: 1, >: 1, &: 1, ": 1, ': 1, `: 1), function_rhs: true], 'function(a){return e[a]}') - Left hand side has to be a range 
// Approximated Implementation for:  replace((&|<|>|"|'|`)/g: 1, s: 0, u: 0, m: 0, i: 0 [escapes(<: 1, >: 1, &: 1, ": 1, ': 1, `: 1), function_rhs: true], 'function(a){return e[a]}') - Left hand side has to be a range 
digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="preg_replace"];
n2 [shape=box, label="RegExp: /[#]/"];
n3 [shape=box, label="Lit: "];
n4 [shape=box, label="Var: x"];
n5 [shape=ellipse, label="."];
n6 [shape=box, label="Lit: &quot;"];
n7 [shape=ellipse, label="."];
n8 [shape=box, label="Lit: &gt;"];
n9 [shape=ellipse, label="."];
n10 [shape=box, label="Lit: &lt;"];
n11 [shape=ellipse, label="."];
n12 [shape=box, label="Lit: &lt;"];
n13 [shape=ellipse, label="."];
n14 [shape=box, label="Lit: &lt;"];
n15 [shape=ellipse, label="."];
n16 [shape=box, label="Lit: &lt;"];
n17 [shape=ellipse, label="."];
n18 [shape=box, label="Lit: &lt;"];
n19 [shape=ellipse, label="."];
n20 [shape=box, label="Lit: &lt;"];
n21 [shape=ellipse, label="."];
n22 [shape=box, label="Lit: &lt;"];
n23 [shape=ellipse, label="."];
n24 [shape=box, label="Lit: &lt;"];
n25 [shape=ellipse, label="preg_replace"];
n26 [shape=box, label="RegExp: /(&|<|>|"|'|`)/"];
n27 [shape=box, label="Lit: "];
n28 [shape=box, label="Var: x"];
n29 [shape=ellipse, label="."];
n30 [shape=box, label="Lit: "];
n31 [shape=ellipse, label="."];
n32 [shape=box, label="Lit: "];
n33 [shape=ellipse, label="preg_replace"];
n34 [shape=box, label="RegExp: /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/"];
n35 [shape=box, label="Lit: "];
n36 [shape=box, label="Var: x"];
n37 [shape=box, label="Var: x"];
n38 [shape=doubleoctagon, label="Return: x"];
n4 -> n0;
n1 -> n2;
n1 -> n3;
n1 -> n4;
n5 -> n1;
n5 -> n6;
n7 -> n5;
n7 -> n8;
n9 -> n7;
n9 -> n10;
n11 -> n9;
n11 -> n12;
n13 -> n11;
n13 -> n14;
n15 -> n13;
n15 -> n16;
n17 -> n15;
n17 -> n18;
n19 -> n17;
n19 -> n20;
n21 -> n19;
n21 -> n22;
n23 -> n21;
n23 -> n24;
n28 -> n23;
n25 -> n26;
n25 -> n27;
n25 -> n28;
n29 -> n30;
n29 -> n25;
n31 -> n29;
n31 -> n32;
n36 -> n31;
n33 -> n34;
n33 -> n35;
n33 -> n36;
n37 -> n33;
n38 -> n37;
}