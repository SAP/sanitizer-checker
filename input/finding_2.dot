// Finding: e53824cd-3696-4b00-bc43-b3c9710d165b
// Finding.url: https://maps.example2.com/?trafficLayer=&map=yandex&from=%27%3BtaintfoxLog%28%27ef836746cfd14f08bd38ada8a61185fe%27%29%2F%2F
// Finding.parentloc: https://maps.example2.com/?trafficLayer=&map=yandex&from=%27%3BtaintfoxLog%28%27ef836746cfd14f08bd38ada8a61185fe%27%29%2F%2F
// Finding.domain: maps.example2.com
// Finding.base_domain: example2.com
// Finding.source: location.search
// Finding.sink: eval
// Sanitizer.score: 239
// Sanitizer.name: parse_str
// Sanitizer.location: https://maps.example2.com/static/js/min/public.js?14b4687 - g:151:4868
// Finding.begin: 16
// Finding.end: 22
// Finding.original_uuid: f490d582-da78-41f0-a93a-5ae621607b93
// Finding.TwentyFiveMillionFlowsId: -1142856077
// Finding.script: https://maps.example2.com/static/js/min/public.js?14b4687
// Finding.line: 149
// Exploit.uuid: ef836746-cfd1-4f08-bd38-ada8a61185fe
// Exploit.success: false
// Exploit.status: validated
// Exploit.method: C
// Exploit.type: js
// Exploit.token: Literal
// Exploit.content: probki
// Exploit.quote_type: None
// Exploit.tag: None
// Exploit.break_out: ';
// Exploit.break_in: //
// Exploit.payload: ';taintfoxLog(1)//
// Exploit.begin_taint_url: 50
// Exploit.end_taint_url: 56
// Exploit.replace_begin_url: 50
// Exploit.replace_end_url: 56
// Exploit.replace_begin_param: 17
// Exploit.replace_end_param: 23
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: false
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: false
// Issues.MergedSplitAndJoins: false
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: false
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: 408067289
// DepGraph.sanitizer_hash: 408067289

digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="regex_exec"];
n2 [shape=box, label="RegExp: /^&?([\s\S]*?)&?$/"];
n3 [shape=box, label="Lit: 1"];
n4 [shape=box, label="Var: x"];
n5 [shape=ellipse, label="str_replace_once"];
n6 [shape=box, label="RegExp: /^&?([\s\S]*?)&?$/"];
n7 [shape=box, label="Lit: $1"];
n8 [shape=box, label="Var: x"];
n9 [shape=ellipse, label="split"];
n10 [shape=box, label="Lit: &"];
n11 [shape=box, label="Var: x"];
n12 [shape=ellipse, label="split"];
n13 [shape=box, label="Lit: ="];
n14 [shape=box, label="Var: x"];
n15 [shape=ellipse, label="decodeURIComponent"];
n16 [shape=box, label="Var: x"];
n17 [shape=ellipse, label="decodeURIComponent"];
n18 [shape=box, label="Var: x"];
n19 [shape=ellipse, label="preg_replace"];
n20 [shape=box, label="RegExp: /([\\"'])/"];
n21 [shape=box, label="Lit: \$1"];
n22 [shape=box, label="Var: x"];
n23 [shape=ellipse, label="preg_replace"];
n24 [shape=box, label="RegExp: /\n/"];
n25 [shape=box, label="Lit: \n"];
n26 [shape=box, label="Var: x"];
n27 [shape=ellipse, label="preg_replace"];
n28 [shape=box, label="RegExp: /\r/"];
n29 [shape=box, label="Lit: \r"];
n30 [shape=box, label="Var: x"];
n31 [shape=box, label="Var: x"];
n32 [shape=doubleoctagon, label="Return: x"];
n4 -> n0;
n1 -> n2;
n1 -> n3;
n1 -> n4;
n8 -> n1;
n5 -> n6;
n5 -> n7;
n5 -> n8;
n11 -> n5;
n9 -> n10;
n9 -> n11;
n14 -> n9;
n12 -> n13;
n12 -> n14;
n16 -> n12;
n15 -> n16;
n18 -> n15;
n17 -> n18;
n22 -> n17;
n19 -> n20;
n19 -> n21;
n19 -> n22;
n26 -> n19;
n23 -> n24;
n23 -> n25;
n23 -> n26;
n30 -> n23;
n27 -> n28;
n27 -> n29;
n27 -> n30;
n31 -> n27;
n32 -> n31;
}