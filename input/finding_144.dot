// Finding: b823c624-ac5a-4b0c-a4dc-cbbc790730a5
// Finding.url: https://www.example141.com/themes/covid-19/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('c7a18691038f4e0481b42c2b0d97e1aa')><!--/*
// Finding.parentloc: https://www.example141.com/themes/covid-19/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('c7a18691038f4e0481b42c2b0d97e1aa')><!--/*
// Finding.domain: www.example141.com
// Finding.base_domain: example141.com
// Finding.source: location.href
// Finding.sink: innerHTML
// Sanitizer.score: 7
// Sanitizer.name: [37]</n.escapeExpression
// Sanitizer.location: https://www.example141.com/themes/covid-19/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('c7a18691038f4e0481b42c2b0d97e1aa')><!--/* - 8:53:3303
// Finding.begin: 135
// Finding.end: 141
// Finding.original_uuid: b21c8552-17d8-48fe-976e-8cdc21b406b7
// Finding.TwentyFiveMillionFlowsId: -1043129962
// Finding.script: https://www.example141.com/themes/covid-19/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('c7a18691038f4e0481b42c2b0d97e1aa')><!--/*
// Finding.line: 53
// Exploit.uuid: c7a18691-038f-4e04-81b4-2c2b0d97e1aa
// Exploit.success: false
// Exploit.status: validated
// Exploit.method: C
// Exploit.type: html
// Exploit.token: attribute
// Exploit.content: href
// Exploit.quote_type: "
// Exploit.tag: a
// Exploit.break_out: #"></iframe></style></script></object></embed></textarea><img src=x onerror=
// Exploit.break_in: ><!--/*
// Exploit.payload: #"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog(1)><!--/*
// Exploit.begin_taint_url: 0
// Exploit.end_taint_url: 45
// Exploit.replace_begin_url: 45
// Exploit.replace_end_url: 45
// Exploit.replace_begin_param: 104
// Exploit.replace_end_param: 104
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: true
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: false
// Issues.MergedSplitAndJoins: false
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: true
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: 149292353
// DepGraph.sanitizer_hash: 2112840808
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Approximated Implementation for: replace([&<>"'`=]/g: 1, s: 0, u: 0, m: 0, i: 0 [escapes(<: 1, >: 1, &: 1, ": 1, ': 1, `: 1, =: 1), function_rhs: true], 'function l(e){return r[e]}') - Other Exception: TypeError: Cannot read property '"' of undefined, Other Exception: TypeError: Cannot read property '&' of undefined, Other Exception: TypeError: Cannot read property ''' of undefined, Other Exception: TypeError: Cannot read property '<' of undefined, Other Exception: TypeError: Cannot read property '=' of undefined, Other Exception: TypeError: Cannot read property '>' of undefined, Other Exception: TypeError: Cannot read property '`' of undefined 
digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="."];
n2 [shape=box, label="Lit: &gt;"];
n3 [shape=ellipse, label="."];
n4 [shape=box, label="Lit: &lt;"];
n5 [shape=ellipse, label="."];
n6 [shape=box, label="Lit: &lt;"];
n7 [shape=ellipse, label="."];
n8 [shape=box, label="Lit: &lt;"];
n9 [shape=ellipse, label="."];
n10 [shape=box, label="Lit: &lt;"];
n11 [shape=ellipse, label="."];
n12 [shape=box, label="Lit: &lt;"];
n13 [shape=ellipse, label="."];
n14 [shape=box, label="Lit: &lt;"];
n15 [shape=ellipse, label="preg_replace"];
n16 [shape=box, label="RegExp: /[&<>"'`=]/"];
n17 [shape=box, label="Lit: "];
n18 [shape=box, label="Var: x"];
n19 [shape=box, label="Var: x"];
n20 [shape=doubleoctagon, label="Return: x"];
n1 -> n0;
n1 -> n2;
n3 -> n1;
n3 -> n4;
n5 -> n3;
n5 -> n6;
n7 -> n5;
n7 -> n8;
n9 -> n7;
n9 -> n10;
n11 -> n9;
n11 -> n12;
n13 -> n11;
n13 -> n14;
n18 -> n13;
n15 -> n16;
n15 -> n17;
n15 -> n18;
n19 -> n15;
n20 -> n19;
}