// Finding: b441fcbe-19fc-460a-960a-f1c8074f5695
// Finding.url: https://t.example365.com/pia/search_dtl_input.do##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('2fd77c1dbd014d748edb72fa687e5c08')><!--/*
// Finding.parentloc: https://t.example365.com/pia/search_dtl_input.do##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('2fd77c1dbd014d748edb72fa687e5c08')><!--/*
// Finding.domain: t.example365.com
// Finding.base_domain: example365.com
// Finding.source: location.href
// Finding.sink: innerHTML
// Sanitizer.score: 5
// Sanitizer.name: each
// Sanitizer.location: https://image.example365.com/common2//js/jquery-1.3.2.min.js - each:12:7964
// Finding.begin: 46
// Finding.end: 88
// Finding.original_uuid: 9744aa48-1eba-44a4-a30e-defbeef6dc4e
// Finding.TwentyFiveMillionFlowsId: -509312688
// Finding.script: https://image.example365.com/common2//js/jquery-1.3.2.min.js
// Finding.line: 12
// Exploit.uuid: 2fd77c1d-bd01-4d74-8edb-72fa687e5c08
// Exploit.success: false
// Exploit.status: failure
// Exploit.method: C
// Exploit.type: html
// Exploit.token: attribute
// Exploit.content: value
// Exploit.quote_type: "
// Exploit.tag: input
// Exploit.break_out: #"></iframe></style></script></object></embed></textarea><img src=x onerror=
// Exploit.break_in: ><!--/*
// Exploit.payload: #"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog(1)><!--/*
// Exploit.begin_taint_url: 0
// Exploit.end_taint_url: 40
// Exploit.replace_begin_url: 40
// Exploit.replace_end_url: 40
// Exploit.replace_begin_param: 86
// Exploit.replace_end_param: 86
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: true
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: true
// Issues.MergedSplitAndJoins: false
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: true
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: -2028915986
// DepGraph.sanitizer_hash: -1171838057
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
// Non Finite Regex with function on rhs:  replace((<(\w+)[^>]*?)\/>/g: 1, s: 0, u: 0, m: 0, i: 0 [escapes(), function_rhs: true], 'function(U,V,T){return T.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i)?U:V+"></"+T+">"}') - Left hand side has to be a range 
// Approximated Implementation for:  replace((<(\w+)[^>]*?)\/>/g: 1, s: 0, u: 0, m: 0, i: 0 [escapes(), function_rhs: true], 'function(U,V,T){return T.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i)?U:V+"></"+T+">"}') - Left hand side has to be a range 
digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="."];
n2 [shape=box, label="Lit: &quot;"];
n3 [shape=ellipse, label="."];
n4 [shape=box, label="Lit: &gt;"];
n5 [shape=ellipse, label="."];
n6 [shape=box, label="Lit: &lt;"];
n7 [shape=ellipse, label="."];
n8 [shape=box, label="Lit: &lt;"];
n9 [shape=ellipse, label="."];
n10 [shape=box, label="Lit: &lt;"];
n11 [shape=ellipse, label="."];
n12 [shape=box, label="Lit: &lt;"];
n13 [shape=ellipse, label="."];
n14 [shape=box, label="Lit: &lt;"];
n15 [shape=ellipse, label="."];
n16 [shape=box, label="Lit: &lt;"];
n17 [shape=ellipse, label="."];
n18 [shape=box, label="Lit: &lt;"];
n19 [shape=ellipse, label="."];
n20 [shape=box, label="Lit: &lt;"];
n21 [shape=ellipse, label="preg_replace"];
n22 [shape=box, label="RegExp: /[&]/"];
n23 [shape=box, label="Lit: &amp;"];
n24 [shape=box, label="Var: x"];
n25 [shape=ellipse, label="preg_replace"];
n26 [shape=box, label="RegExp: /["]/"];
n27 [shape=box, label="Lit: &quot;"];
n28 [shape=box, label="Var: x"];
n29 [shape=ellipse, label="preg_replace"];
n30 [shape=box, label="RegExp: /[<]/"];
n31 [shape=box, label="Lit: &lt;"];
n32 [shape=box, label="Var: x"];
n33 [shape=ellipse, label="preg_replace"];
n34 [shape=box, label="RegExp: /[>]/"];
n35 [shape=box, label="Lit: &gt;"];
n36 [shape=box, label="Var: x"];
n37 [shape=ellipse, label="."];
n38 [shape=box, label="Lit: <input type="hidden" class="returnUrl" value=""];
n39 [shape=ellipse, label="."];
n40 [shape=box, label="Lit: " />"];
n41 [shape=ellipse, label="regex_exec"];
n42 [shape=box, label="RegExp: /(<(\w+)[^>]*?)\/>/"];
n43 [shape=box, label="Lit: 0"];
n44 [shape=box, label="Var: x"];
n45 [shape=ellipse, label="preg_replace"];
n46 [shape=box, label="RegExp: /(<(\w+)[^>]*?)\/>/"];
n47 [shape=box, label="Lit: "];
n48 [shape=box, label="Var: x"];
n49 [shape=ellipse, label="str_replace_once"];
n50 [shape=box, label="RegExp: /^\s+/"];
n51 [shape=box, label="Lit: "];
n52 [shape=box, label="Var: x"];
n53 [shape=box, label="Var: x"];
n54 [shape=doubleoctagon, label="Return: x"];
n1 -> n0;
n1 -> n2;
n3 -> n1;
n3 -> n4;
n5 -> n3;
n5 -> n6;
n7 -> n5;
n7 -> n8;
n9 -> n7;
n9 -> n10;
n11 -> n9;
n11 -> n12;
n13 -> n11;
n13 -> n14;
n15 -> n13;
n15 -> n16;
n17 -> n15;
n17 -> n18;
n19 -> n17;
n19 -> n20;
n24 -> n19;
n21 -> n22;
n21 -> n23;
n21 -> n24;
n28 -> n21;
n25 -> n26;
n25 -> n27;
n25 -> n28;
n32 -> n25;
n29 -> n30;
n29 -> n31;
n29 -> n32;
n36 -> n29;
n33 -> n34;
n33 -> n35;
n33 -> n36;
n37 -> n38;
n37 -> n33;
n39 -> n37;
n39 -> n40;
n44 -> n39;
n41 -> n42;
n41 -> n43;
n41 -> n44;
n48 -> n41;
n45 -> n46;
n45 -> n47;
n45 -> n48;
n52 -> n45;
n49 -> n50;
n49 -> n51;
n49 -> n52;
n53 -> n49;
n54 -> n53;
}