// Finding: f2a048e9-4b82-4ac7-80b6-f1d0a10eb9e8
// Finding.url: http://bbs.example353.com/thread.php?fid=-152678##"></iframe></style></script></object></embed></textarea><script>taintfoxLog('240536e498bc44f1a9db2bfd3f5720a5')</script><!--/*
// Finding.parentloc: http://bbs.example353.com/thread.php?fid=-152678##"></iframe></style></script></object></embed></textarea><script>taintfoxLog('240536e498bc44f1a9db2bfd3f5720a5')</script><!--/*
// Finding.domain: bbs.example353.com
// Finding.base_domain: example353.com
// Finding.source: location.search
// Finding.sink: document.write
// Sanitizer.score: 1
// Sanitizer.name: e
// Sanitizer.location: http://bbs.example353.com/thread.php?fid=-152678##"></iframe></style></script></object></embed></textarea><script>taintfoxLog('240536e498bc44f1a9db2bfd3f5720a5')</script><!--/* - e:37:64
// Finding.begin: 20
// Finding.end: 32
// Finding.original_uuid: da64de7d-046f-46de-b3ff-417b3c6468b2
// Finding.TwentyFiveMillionFlowsId: 1066106850
// Finding.script: http://bbs.example353.com/thread.php?fid=-152678##"></iframe></style></script></object></embed></textarea><script>taintfoxLog('240536e498bc44f1a9db2bfd3f5720a5')</script><!--/*
// Finding.line: 35
// Exploit.uuid: 240536e4-98bc-44f1-a9db-2bfd3f5720a5
// Exploit.success: false
// Exploit.status: validated
// Exploit.method: C
// Exploit.type: html
// Exploit.token: attribute
// Exploit.content: href
// Exploit.quote_type: "
// Exploit.tag: a
// Exploit.break_out: #"></iframe></style></script></object></embed></textarea><script>
// Exploit.break_in: </script><!--/*
// Exploit.payload: #"></iframe></style></script></object></embed></textarea><script>taintfoxLog(1)</script><!--/*
// Exploit.begin_taint_url: 28
// Exploit.end_taint_url: 40
// Exploit.replace_begin_url: 40
// Exploit.replace_end_url: 40
// Exploit.replace_begin_param: 32
// Exploit.replace_end_param: 32
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: false
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: false
// Issues.MergedSplitAndJoins: false
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: true
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: 1019369171
// DepGraph.sanitizer_hash: -673216345
// Removed LR concats 
digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="str_replace_once"];
n2 [shape=box, label="RegExp: /(?:\?|&)rand=\d+/"];
n3 [shape=box, label="Lit: "];
n4 [shape=box, label="Var: x"];
n5 [shape=ellipse, label="."];
n6 [shape=box, label="Lit: &rand="];
n7 [shape=ellipse, label="."];
n8 [shape=box, label="Lit: 625"];
n9 [shape=ellipse, label="str_replace_once"];
n10 [shape=box, label="RegExp: /^&/"];
n11 [shape=box, label="Lit: ?"];
n12 [shape=box, label="Var: x"];
n13 [shape=box, label="Var: x"];
n14 [shape=doubleoctagon, label="Return: x"];
n4 -> n0;
n1 -> n2;
n1 -> n3;
n1 -> n4;
n5 -> n1;
n5 -> n6;
n7 -> n5;
n7 -> n8;
n12 -> n7;
n9 -> n10;
n9 -> n11;
n9 -> n12;
n13 -> n9;
n14 -> n13;
}