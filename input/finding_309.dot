// Finding: 476f9d5f-a432-4bba-82bb-4ae657593e22
// Finding.url: https://support.example232.com/en/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('ef468590dd5e44d2bbd52d3d36c0cc02')><!--/*
// Finding.parentloc: https://support.example232.com/en/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('ef468590dd5e44d2bbd52d3d36c0cc02')><!--/*
// Finding.domain: support.example232.com
// Finding.base_domain: example232.com
// Finding.source: location.href
// Finding.sink: innerHTML
// Sanitizer.score: 1
// Sanitizer.name: <synthetic>
// Sanitizer.location: example18.com
// Finding.begin: 211
// Finding.end: 440
// Finding.original_uuid: 2c0f6902-5cd7-49fe-934a-698641654a48
// Finding.TwentyFiveMillionFlowsId: 1392910680
// Finding.script: https://support.example232.com/TSbd/08574dc990ab2000a6d3f8dee96ddf93c96b517199985f86bee875fca0f37eb8ecdedf1991837e9e?type=2
// Finding.line: 59
// Exploit.uuid: ef468590-dd5e-44d2-bbd5-2d3d36c0cc02
// Exploit.success: false
// Exploit.status: validated
// Exploit.method: C
// Exploit.type: html
// Exploit.token: attribute
// Exploit.content: href
// Exploit.quote_type: "
// Exploit.tag: a
// Exploit.break_out: #"></iframe></style></script></object></embed></textarea><img src=x onerror=
// Exploit.break_in: ><!--/*
// Exploit.payload: #"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog(1)><!--/*
// Exploit.begin_taint_url: 0
// Exploit.end_taint_url: 28
// Exploit.replace_begin_url: 28
// Exploit.replace_end_url: 28
// Exploit.replace_begin_param: 307
// Exploit.replace_end_param: 307
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: false
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: false
// Issues.MergedSplitAndJoins: true
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: false
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: -531013349
// DepGraph.sanitizer_hash: 1835139458
// Merged split and join statements 
digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="encodeURIComponent"];
n2 [shape=box, label="Var: x"];
n3 [shape=ellipse, label="substr"];
n4 [shape=box, label="Var: x"];
n5 [shape=box, label="Lit: 0"];
n6 [shape=ellipse, label="."];
n7 [shape=box, label="Lit: referer="];
n8 [shape=ellipse, label="."];
n9 [shape=box, label="Lit: &"];
n10 [shape=ellipse, label="."];
n11 [shape=box, label="Lit: &"];
n12 [shape=ellipse, label="."];
n13 [shape=box, label="Lit: ?"];
n14 [shape=ellipse, label="."];
n15 [shape=box, label="Lit: /rb_bf33006wli"];
n16 [shape=ellipse, label="preg_replace"];
n17 [shape=box, label="RegExp: /[&]/"];
n18 [shape=box, label="Lit: &amp;"];
n19 [shape=box, label="Var: x"];
n20 [shape=box, label="Var: x"];
n21 [shape=doubleoctagon, label="Return: x"];
n2 -> n0;
n1 -> n2;
n4 -> n1;
n3 -> n4;
n3 -> n5;
n6 -> n7;
n6 -> n3;
n8 -> n9;
n8 -> n6;
n10 -> n8;
n10 -> n11;
n12 -> n13;
n12 -> n10;
n14 -> n15;
n14 -> n12;
n19 -> n14;
n16 -> n17;
n16 -> n18;
n16 -> n19;
n20 -> n16;
n21 -> n20;
}