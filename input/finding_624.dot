// Finding: b5ca66b3-8879-4094-a966-3672129a0179
// Finding.url: https://commons.example383.com/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('56869ee4fedb45b1b0ddca063616180d')><!--/*
// Finding.parentloc: https://commons.example383.com/##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('56869ee4fedb45b1b0ddca063616180d')><!--/*
// Finding.domain: commons.example383.com
// Finding.base_domain: example383.com
// Finding.source: location.href
// Finding.sink: innerHTML
// Sanitizer.score: 4
// Sanitizer.name: W
// Sanitizer.location: https://commons.example383.com/assets/floatbox/floatbox.js - W:7:4081
// Finding.begin: 213
// Finding.end: 218
// Finding.original_uuid: d7bb1edc-1af0-4cab-ae9b-7e3f68cb9345
// Finding.TwentyFiveMillionFlowsId: 1830256831
// Finding.script: https://commons.example383.com/assets/floatbox/floatbox.js
// Finding.line: 7
// Exploit.uuid: 56869ee4-fedb-45b1-b0dd-ca063616180d
// Exploit.success: false
// Exploit.status: validated
// Exploit.method: C
// Exploit.type: html
// Exploit.token: attribute
// Exploit.content: href
// Exploit.quote_type: "
// Exploit.tag: a
// Exploit.break_out: #"></iframe></style></script></object></embed></textarea><img src=x onerror=
// Exploit.break_in: ><!--/*
// Exploit.payload: #"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog(1)><!--/*
// Exploit.begin_taint_url: 0
// Exploit.end_taint_url: 25
// Exploit.replace_begin_url: 25
// Exploit.replace_end_url: 25
// Exploit.replace_begin_param: 34
// Exploit.replace_end_param: 34
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: false
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: false
// Issues.MergedSplitAndJoins: false
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: true
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: -1643526455
// DepGraph.sanitizer_hash: -758581554
// Removed LR concats 
// Removed LR concats 
// Removed LR concats 
digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="preg_replace"];
n2 [shape=box, label="RegExp: /&lt;/"];
n3 [shape=box, label="Lit: <"];
n4 [shape=box, label="Var: x"];
n5 [shape=ellipse, label="preg_replace"];
n6 [shape=box, label="RegExp: /&gt;/"];
n7 [shape=box, label="Lit: >"];
n8 [shape=box, label="Var: x"];
n9 [shape=ellipse, label="preg_replace"];
n10 [shape=box, label="RegExp: /&quot;/"];
n11 [shape=box, label="Lit: \""];
n12 [shape=box, label="Var: x"];
n13 [shape=ellipse, label="preg_replace"];
n14 [shape=box, label="RegExp: /&amp;/"];
n15 [shape=box, label="Lit: &"];
n16 [shape=box, label="Var: x"];
n17 [shape=ellipse, label="preg_replace"];
n18 [shape=box, label="RegExp: /[&]/"];
n19 [shape=box, label="Lit: &amp;"];
n20 [shape=box, label="Var: x"];
n21 [shape=ellipse, label="preg_replace"];
n22 [shape=box, label="RegExp: /["]/"];
n23 [shape=box, label="Lit: &quot;"];
n24 [shape=box, label="Var: x"];
n25 [shape=ellipse, label="preg_replace"];
n26 [shape=box, label="RegExp: /[>]/"];
n27 [shape=box, label="Lit: &gt;"];
n28 [shape=box, label="Var: x"];
n29 [shape=ellipse, label="preg_replace"];
n30 [shape=box, label="RegExp: /[<]/"];
n31 [shape=box, label="Lit: &lt;"];
n32 [shape=box, label="Var: x"];
n33 [shape=box, label="Var: x"];
n34 [shape=doubleoctagon, label="Return: x"];
n4 -> n0;
n1 -> n2;
n1 -> n3;
n1 -> n4;
n8 -> n1;
n5 -> n6;
n5 -> n7;
n5 -> n8;
n12 -> n5;
n9 -> n10;
n9 -> n11;
n9 -> n12;
n16 -> n9;
n13 -> n14;
n13 -> n15;
n13 -> n16;
n20 -> n13;
n17 -> n18;
n17 -> n19;
n17 -> n20;
n24 -> n17;
n21 -> n22;
n21 -> n23;
n21 -> n24;
n28 -> n21;
n25 -> n26;
n25 -> n27;
n25 -> n28;
n32 -> n25;
n29 -> n30;
n29 -> n31;
n29 -> n32;
n33 -> n29;
n34 -> n33;
}